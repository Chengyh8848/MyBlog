// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: blog.proto

package blog

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BlogGRPC_LoginUser_FullMethodName            = "/blog.BlogGRPC/LoginUser"
	BlogGRPC_LogoutUser_FullMethodName           = "/blog.BlogGRPC/LogoutUser"
	BlogGRPC_ChangePassword_FullMethodName       = "/blog.BlogGRPC/ChangePassword"
	BlogGRPC_AuthToken_FullMethodName            = "/blog.BlogGRPC/AuthToken"
	BlogGRPC_FindByUsername_FullMethodName       = "/blog.BlogGRPC/FindByUsername"
	BlogGRPC_FindById_FullMethodName             = "/blog.BlogGRPC/FindById"
	BlogGRPC_UpdateUserByUsername_FullMethodName = "/blog.BlogGRPC/UpdateUserByUsername"
)

// BlogGRPCClient is the client API for BlogGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlogGRPCClient interface {
	// 用户登录
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserReply, error)
	// 用户登出
	LogoutUser(ctx context.Context, in *LogoutUserRequest, opts ...grpc.CallOption) (*LogoutUserReply, error)
	// 修改密码
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordReply, error)
	// token校验
	AuthToken(ctx context.Context, in *AuthTokenRequest, opts ...grpc.CallOption) (*AuthTokenReply, error)
	// 按用户名查询user
	FindByUsername(ctx context.Context, in *FindByUsernameRequest, opts ...grpc.CallOption) (*FindByUsernameReply, error)
	// 按id查询user
	FindById(ctx context.Context, in *FindByIdRequest, opts ...grpc.CallOption) (*FindByIdReply, error)
	// 按username修改
	UpdateUserByUsername(ctx context.Context, in *UpdateUserByUsernameRequest, opts ...grpc.CallOption) (*UpdateUserByUsernameReply, error)
}

type blogGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewBlogGRPCClient(cc grpc.ClientConnInterface) BlogGRPCClient {
	return &blogGRPCClient{cc}
}

func (c *blogGRPCClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginUserReply)
	err := c.cc.Invoke(ctx, BlogGRPC_LoginUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogGRPCClient) LogoutUser(ctx context.Context, in *LogoutUserRequest, opts ...grpc.CallOption) (*LogoutUserReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogoutUserReply)
	err := c.cc.Invoke(ctx, BlogGRPC_LogoutUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogGRPCClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangePasswordReply)
	err := c.cc.Invoke(ctx, BlogGRPC_ChangePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogGRPCClient) AuthToken(ctx context.Context, in *AuthTokenRequest, opts ...grpc.CallOption) (*AuthTokenReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthTokenReply)
	err := c.cc.Invoke(ctx, BlogGRPC_AuthToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogGRPCClient) FindByUsername(ctx context.Context, in *FindByUsernameRequest, opts ...grpc.CallOption) (*FindByUsernameReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindByUsernameReply)
	err := c.cc.Invoke(ctx, BlogGRPC_FindByUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogGRPCClient) FindById(ctx context.Context, in *FindByIdRequest, opts ...grpc.CallOption) (*FindByIdReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindByIdReply)
	err := c.cc.Invoke(ctx, BlogGRPC_FindById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogGRPCClient) UpdateUserByUsername(ctx context.Context, in *UpdateUserByUsernameRequest, opts ...grpc.CallOption) (*UpdateUserByUsernameReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserByUsernameReply)
	err := c.cc.Invoke(ctx, BlogGRPC_UpdateUserByUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlogGRPCServer is the server API for BlogGRPC service.
// All implementations must embed UnimplementedBlogGRPCServer
// for forward compatibility.
type BlogGRPCServer interface {
	// 用户登录
	LoginUser(context.Context, *LoginUserRequest) (*LoginUserReply, error)
	// 用户登出
	LogoutUser(context.Context, *LogoutUserRequest) (*LogoutUserReply, error)
	// 修改密码
	ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordReply, error)
	// token校验
	AuthToken(context.Context, *AuthTokenRequest) (*AuthTokenReply, error)
	// 按用户名查询user
	FindByUsername(context.Context, *FindByUsernameRequest) (*FindByUsernameReply, error)
	// 按id查询user
	FindById(context.Context, *FindByIdRequest) (*FindByIdReply, error)
	// 按username修改
	UpdateUserByUsername(context.Context, *UpdateUserByUsernameRequest) (*UpdateUserByUsernameReply, error)
	mustEmbedUnimplementedBlogGRPCServer()
}

// UnimplementedBlogGRPCServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBlogGRPCServer struct{}

func (UnimplementedBlogGRPCServer) LoginUser(context.Context, *LoginUserRequest) (*LoginUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedBlogGRPCServer) LogoutUser(context.Context, *LogoutUserRequest) (*LogoutUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogoutUser not implemented")
}
func (UnimplementedBlogGRPCServer) ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedBlogGRPCServer) AuthToken(context.Context, *AuthTokenRequest) (*AuthTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthToken not implemented")
}
func (UnimplementedBlogGRPCServer) FindByUsername(context.Context, *FindByUsernameRequest) (*FindByUsernameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByUsername not implemented")
}
func (UnimplementedBlogGRPCServer) FindById(context.Context, *FindByIdRequest) (*FindByIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedBlogGRPCServer) UpdateUserByUsername(context.Context, *UpdateUserByUsernameRequest) (*UpdateUserByUsernameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserByUsername not implemented")
}
func (UnimplementedBlogGRPCServer) mustEmbedUnimplementedBlogGRPCServer() {}
func (UnimplementedBlogGRPCServer) testEmbeddedByValue()                  {}

// UnsafeBlogGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlogGRPCServer will
// result in compilation errors.
type UnsafeBlogGRPCServer interface {
	mustEmbedUnimplementedBlogGRPCServer()
}

func RegisterBlogGRPCServer(s grpc.ServiceRegistrar, srv BlogGRPCServer) {
	// If the following call pancis, it indicates UnimplementedBlogGRPCServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BlogGRPC_ServiceDesc, srv)
}

func _BlogGRPC_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogGRPCServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogGRPC_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogGRPCServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogGRPC_LogoutUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogGRPCServer).LogoutUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogGRPC_LogoutUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogGRPCServer).LogoutUser(ctx, req.(*LogoutUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogGRPC_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogGRPCServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogGRPC_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogGRPCServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogGRPC_AuthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogGRPCServer).AuthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogGRPC_AuthToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogGRPCServer).AuthToken(ctx, req.(*AuthTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogGRPC_FindByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogGRPCServer).FindByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogGRPC_FindByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogGRPCServer).FindByUsername(ctx, req.(*FindByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogGRPC_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogGRPCServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogGRPC_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogGRPCServer).FindById(ctx, req.(*FindByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogGRPC_UpdateUserByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogGRPCServer).UpdateUserByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogGRPC_UpdateUserByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogGRPCServer).UpdateUserByUsername(ctx, req.(*UpdateUserByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlogGRPC_ServiceDesc is the grpc.ServiceDesc for BlogGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlogGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.BlogGRPC",
	HandlerType: (*BlogGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginUser",
			Handler:    _BlogGRPC_LoginUser_Handler,
		},
		{
			MethodName: "LogoutUser",
			Handler:    _BlogGRPC_LogoutUser_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _BlogGRPC_ChangePassword_Handler,
		},
		{
			MethodName: "AuthToken",
			Handler:    _BlogGRPC_AuthToken_Handler,
		},
		{
			MethodName: "FindByUsername",
			Handler:    _BlogGRPC_FindByUsername_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _BlogGRPC_FindById_Handler,
		},
		{
			MethodName: "UpdateUserByUsername",
			Handler:    _BlogGRPC_UpdateUserByUsername_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}
